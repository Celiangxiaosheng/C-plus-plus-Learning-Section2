#include<iostream>
using namespace std;

/***************************************************************************************
* 1.概括。
*	1.1.内存的分区模型
*		I.  代码区：存放函数体的二进制代码，由操作系统进行管理
*		II. 全局区：存放全局变量和静态变量以及常量
*		III.栈区：由编译器自动分配释放，存放函数的参数值，局部变量等.
*		IV. 堆区：由程序员分配和释放，若程序员不释放，程序结束时由操作系统回收.
*	1.2.内存四区的意义
*		不同区域存放的数据，赋予不同的生命周期，给我们更大的灵活编程
* 2.具体分析
*	2.1.程序运行前
*		在程序编译后，生成了.exe可执行程序，未执行该程序前分为两个区域
*		代码区：
*			存放CUP执行的机器指令
*			代码区是共享的，共享的目的是对于频繁被执行的程序，只需要在内存中有一份代码即可
*			代码区是只读的，使其只读的原因是防止程序意外地修改了它的指令
*		全局区：
*			全局变量和静态变量存放在此
*			全局区还包含了常量区，字符串常量和其他常量(Const修饰)也存放在此
*			**该区域的数据在程序结束后由操作系统释放
*	2.2.程序运行后
*		栈区：
*			由编译器自动分配释放，存放函数的参数值，局部变量等
*			注意事项：不要返回局部变量的地址，栈区开辟的数据由编译器自动释放
*		堆区：
*			由程序员分配释放，若程序员不释放，程序结束后由操作系统回收
*			在c++中主要利用new在堆区开辟内存
* 3.总结
*	3.1
*		C++中程序运行前分为全局区和代码区
*		代码区特点是共享和只读
*		全局区存放全局变量、静态变量、常量
*		常量区中存放const修饰的全局常量和字符串常量
*	3.2
*		堆区数据是由程序员管理开辟和释放
*		堆区数据利用new关键字进行开辟内存
* 
**************************************************************************************/
//全局变量
int g_a = 10;
int g_b = 10;

//const修饰的全局变量
const int c_g_a = 10;
const int c_g_b = 10;

void Test1()
{
	//创建普通局部变量
	int a = 10;
	int b = 10;
	cout << "局部变量a的地址为：" << (int)&a << endl;
	cout << "局部变量b的地址为：" << (int)&b << endl;

	cout << "全局变量g_a的地址为：" << (int)&g_a << endl;
	cout << "全局变量g_b的地址为：" << (int)&g_b << endl;

	//静态变量
	static int s_a = 10;
	static int s_b = 10;
	cout << "静态变量s_a的地址为：" << (int)&s_a << endl;
	cout << "静态变量s_b的地址为：" << (int)&s_b << endl;

	//常量
	//字符串常量
	cout << "字符串常量的地址为：" << (int)&"hello world!" << endl;
	//Const修饰的变量
	//const修饰全局变量
	cout << "全局常量c_g_a的地址为：" << (int)&c_g_a << endl;
	cout << "全局常量c_g_b的地址为：" << (int)&c_g_b << endl;
	//const修饰局部变量
	const int c_l_a = 10;
	const int c_l_b = 10;

	cout << "局部常量c_l_a的地址为：" << (int)&c_l_a << endl;
	cout << "局部常量c_l_b的地址为：" << (int)&c_l_b << endl;
}

//栈区数据的注意事项-------不要返回局部变量的地址
int* func(int b)//形参数据也会放在栈区
{
	b = 100;
	int a = 10;//局部变量     存放在栈区，栈区的数据在函数执行完后自动释放
	return &a;//返回局部变量的地址
}
int * func1()
{
	//利用new关键字可以将数据开辟到堆区
	//指针 本质也是局部变量，放在栈上，指针保存的数据是放在堆区
	int *p = new int(10);
	return p;
}

//int main()
//{
//	//接受func函数的返回值
//	/*int* p = func(1);
//	cout << *p << endl;
//	cout << *p << endl;
//	cout << *p << endl;
//	cout << *p << endl;*/
//	//在堆区开辟数据
//	/*int* p = func1();
//	cout << *p << endl;
//	cout << *p << endl;
//	cout << *p << endl;*/	 
//
//	system("pause");
//	return 0;
//}